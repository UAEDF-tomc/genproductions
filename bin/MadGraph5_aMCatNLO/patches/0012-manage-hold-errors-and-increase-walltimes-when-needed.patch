diff --git a/madgraph/various/cluster.py b/madgraph/various/cluster.py
index 62f6a37..3d9c5dc 100755
--- a/madgraph/various/cluster.py
+++ b/madgraph/various/cluster.py
@@ -857,8 +857,12 @@ class CondorCluster(Cluster):
         try:
             import htcondor
             self.schedd = htcondor.Schedd()
+            self._action = htcondor.JobAction
         except Exception, error:
             raise ClusterManagmentError, 'could not import htcondor python API: \n%s' % error
+        self.hold_list = os.environ.get("CONDOR_RELEASE_HOLDCODES", "")
+        self.max_shadows = os.environ.get("CONDOR_RELEASE_HOLDCODES_SHADOW_LIM", "")
+        self.walltimes = os.environ.get("CONDOR_SET_MAXWALLTIMES", "")
 
     def query(self, ids, ads=[], lim=-1):
         """Query the Schedd via HTCondor Python API"""
@@ -867,6 +871,13 @@ class CondorCluster(Cluster):
                 ",".join(str(id) for id in ids)), ads, limit=lim)
         return q
 
+    def edit(self, ids, ad, value):
+        """ Edit a single parameter classAd in a list of ClusterIds"""
+        q = self.schedd.edit(
+            'stringListmember(string(ClusterId), "{0}")'.format(
+                ",".join(str(id) for id in ids)), str(ad), str(value))
+        return q
+
     def status_map(self, status):
         if status == 0:
             return 'U'
@@ -885,6 +896,85 @@ class CondorCluster(Cluster):
         else:
             return str(status)
 
+    def _release_holdcode(self, id, holdcode, holdsubcode):
+        """ Automatically release job if it is held with the specified
+        hold code and subcode"""
+        q = self.query([str(id)], ["JobStatus", "HoldReasonCode", "HoldReasonSubCode"], lim=1)
+        if len(q)>0:
+            status = self.status_map(q[0]["JobStatus"])
+        else:
+            return False
+
+        if status == 'H':
+            job_hold_code = q[0]["HoldReasonCode"]
+            job_hold_subcode = q[0]["HoldReasonSubCode"]
+            if (job_hold_code == holdcode) and (job_hold_subcode == holdsubcode or holdsubcode == -1):
+                logger.info("ClusterId {0} was held with code {1}, subcode {2}. Releasing it.".format(id, job_hold_code, job_hold_subcode))
+                self.schedd.act(self._action.Release, "ClusterId =?= {0}".format(id))
+                return True
+        return False
+
+    def release_holdcodes(self, id, holdcodes_list, numshadow_limit=10):
+        """ Automatically release job if it is held with any of the specified
+        list of hold codes and subcodes. The convention is hold_code:hold_subcode
+        separated by a comma.If no hold_subcode is specified, only hold_code is
+        taken into account. E.g:
+        holdcodes_list="26:119,13,30:1"
+        """
+        if not isinstance(holdcodes_list, (str, unicode)):
+            logger.info("Holdcodes_list is not a string.")
+            return False
+
+        q = self.query([str(id)], ["NumShadowStarts"], lim=1)
+        num_shadow_starts = q[0]["NumShadowStarts"] if "NumShadowStarts" in q[0] else 0
+        if num_shadow_starts > numshadow_limit:
+            return False
+
+        holdcodes_list = holdcodes_list.split(",")
+        for holdcodes in holdcodes_list:
+            holdcodes = holdcodes.split(":")
+            if False in [i.strip().isdigit() for i in holdcodes]:
+                logger.info("Could not parse holdcodes list, please verify the format.")
+                return False
+            holdcode = int(holdcodes[0].strip())
+            holdsubcode = int(holdcodes[1].strip()) if len(holdcodes)>=2 else -1
+            if self._release_holdcode(id, int(holdcode), int(holdsubcode)):
+                return True
+        return False
+
+    def update_maxwalltime(self, id, walltimes_minutes):
+        """ Automatically increase MaxWallTimeMins classAd from condor job
+        if such job was evicted because its current max promised time was not enough.
+        E.g: walltimes_min="480,960,2400"
+        """
+        if not isinstance(walltimes_minutes, (str, unicode)):
+            return 0
+        else:
+            walltimes_minutes = walltimes_minutes.split(",")
+
+        if False in [i.isdigit() for i in walltimes_minutes]:
+            return 0
+
+        q = self.query([str(id)], ["JobDuration", "MaxWallTimeMins", "LastMaxWalltimeUpdate_JobDuration"], lim=1)
+        job_maxwalltime = q[0]["MaxWallTimeMins"] if "MaxWallTimeMins" in q[0] else 0
+        if hasattr(job_maxwalltime, "eval"):
+            job_maxwalltime = job_maxwalltime.eval()
+        job_duration = q[0]["JobDuration"] if "JobDuration" in q[0] else -1.0
+        last_update_job_duration = \
+                q[0]["LastMaxWalltimeUpdate_JobDuration"] if "LastMaxWalltimeUpdate_JobDuration" in q[0] else -1.0
+
+        if job_duration > job_maxwalltime*60 and job_duration != last_update_job_duration:
+            remaining_walltimes = [int(i) for i in walltimes_minutes
+                                   if int(i) > int(job_maxwalltime) and
+                                   int(i) > (int(job_duration / 60) + int((job_duration / 60) % 1 > 0))]
+
+            if remaining_walltimes:
+                new_maxwalltime = min(remaining_walltimes)
+                self.edit([str(id)], "LastMaxWalltimeUpdate_JobDuration", job_duration)
+                self.edit([str(id)], "MaxWallTimeMins", new_maxwalltime)
+                return new_maxwalltime
+
+        return 0
 
     @multiple_try()
     def submit(self, prog, argument=[], cwd=None, stdout=None, stderr=None, log=None,
@@ -1077,13 +1167,23 @@ class CondorCluster(Cluster):
             for job in q:
                 id, status = job["ClusterId"], self.status_map(job["JobStatus"])
                 ongoing.append(int(id))
+                if self.walltimes:
+                    maxwalltime = self.update_maxwalltime(id, self.walltimes)
+                    if maxwalltime:
+                        logger.info("Updated ClusterId {0} MaxWallTimeMins to: {1}".format(id, maxwalltime))
                 if status in ['I','U']:
                     idle += 1
                 elif status == 'R':
                     run += 1
                 elif status == 'H':
-                    self.hold_msg = "ClusterId %s with HoldReason: %s" % (str(id), job["HoldReason"])
-                    fail += 1
+                    released = False
+                    if self.hold_list:
+                        released = self.release_holdcodes(id, self.hold_list, int(self.max_shadows)) \
+                            if self.max_shadows else \
+                            self.release_holdcodes(id, self.hold_list)
+                    if not released:
+                        self.hold_msg = "ClusterId %s with HoldReason: %s" % (str(id), job["HoldReason"])
+                        fail += 1
                 elif status != 'C':
                     fail += 1
 
